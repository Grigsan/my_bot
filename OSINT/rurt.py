import telebot
import requests
import urllib.parse
import os
import re
from bs4 import BeautifulSoup
import json
import time
from telebot import types

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (Render.com)
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
VK_API_TOKEN = os.getenv('VK_API_TOKEN')

if not TELEGRAM_TOKEN:
    raise ValueError('TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render.com')

bot = telebot.TeleBot(TELEGRAM_TOKEN)

def clean_name(name):
    """–û—á–∏—â–∞–µ—Ç –∏–º—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    return re.sub(r'[^\w\s]', '', name).strip().lower()

def is_exact_match(full_name, profile_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏"""
    full_clean = clean_name(full_name)
    profile_clean = clean_name(profile_name)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
    full_words = set(full_clean.split())
    profile_words = set(profile_clean.split())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –µ—Å—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    return full_words.issubset(profile_words)

def generate_nicknames(name, surname):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏."""
    name = name.lower()
    surname = surname.lower()
    return [
        f"{name}{surname}",
        f"{name}_{surname}",
        f"{name}.{surname}",
        f"{name}-{surname}",
        f"{surname}.{name}"
    ]

@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üîç –ü–æ–∏—Å–∫ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö")
    btn2 = types.KeyboardButton("üéÆ –ü–æ–∏—Å–∫ –≤ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö")
    btn3 = types.KeyboardButton("‚úâÔ∏è –ü–æ–∏—Å–∫ –ø–æ email")
    btn4 = types.KeyboardButton("üìû –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")
    btn5 = types.KeyboardButton("üßæ –ü–æ–∏—Å–∫ –ø–æ –ò–ù–ù")
    btn6 = types.KeyboardButton("üßæ –ü–æ–∏—Å–∫ –ø–æ –°–ù–ò–õ–°")
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    markup.add(btn5, btn6)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø OSINT-–±–æ—Ç. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–∫–∞—Ç—å:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö")
def menu_find_social(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ /find –ò–º—è –§–∞–º–∏–ª–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö.")

@bot.message_handler(func=lambda message: message.text == "üéÆ –ü–æ–∏—Å–∫ –≤ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö")
def menu_find_gamer(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ /find_gamer –ò–º—è –§–∞–º–∏–ª–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö.")

@bot.message_handler(func=lambda message: message.text == "‚úâÔ∏è –ü–æ–∏—Å–∫ –ø–æ email")
def menu_find_email(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ /find_email email –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ email.")

@bot.message_handler(func=lambda message: message.text == "üìû –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")
def menu_find_phone(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ /find_phone —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.")

@bot.message_handler(func=lambda message: message.text == "üßæ –ü–æ–∏—Å–∫ –ø–æ –ò–ù–ù")
def menu_find_inn(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ /find_inn –ò–ù–ù –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ò–ù–ù.")

@bot.message_handler(func=lambda message: message.text == "üßæ –ü–æ–∏—Å–∫ –ø–æ –°–ù–ò–õ–°")
def menu_find_snils(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ /find_snils –°–ù–ò–õ–° –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –°–ù–ò–õ–°.")

def parse_vk_search(name, surname, count=10):
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–∏—Å–∫–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""
    full_name = f"{name} {surname}"
    encoded_name = urllib.parse.quote(full_name)
    url = f"https://vk.com/search?c%5Bq%5D={encoded_name}&c%5Bsection%5D=people"
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        results = []
        # –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
        profile_links = soup.find_all('a', href=re.compile(r'/id\d+'))
        
        for link in profile_links[:20]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª—å—à–µ —Å—Å—ã–ª–æ–∫
            profile_url = 'https://vk.com' + link.get('href')
            profile_name = link.get_text(strip=True)
            
            if is_exact_match(full_name, profile_name):
                results.append((profile_name, profile_url))
                if len(results) >= count:
                    break
        
        return results
    except Exception as e:
        return [("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ VK", str(e))]

def parse_ok_search(name, surname, count=10):
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–∏—Å–∫–∞ –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–æ–≤"""
    full_name = f"{name} {surname}"
    encoded_name = urllib.parse.quote(full_name)
    url = f"https://ok.ru/search?st.query={encoded_name}&st.mode=Users"
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        results = []
        # –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
        profile_links = soup.find_all('a', href=re.compile(r'/profile/\d+'))
        
        for link in profile_links[:20]:
            profile_url = 'https://ok.ru' + link.get('href')
            profile_name = link.get_text(strip=True)
            
            if is_exact_match(full_name, profile_name):
                results.append((profile_name, profile_url))
                if len(results) >= count:
                    break
        
        return results
    except Exception as e:
        return [("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ OK", str(e))]

def parse_instagram_search(name, surname, count=10):
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–∏—Å–∫–∞ Instagram (—á–µ—Ä–µ–∑ —Ç–µ–≥–∏)"""
    full_name = f"{name}{surname}"
    url = f"https://www.instagram.com/explore/tags/{full_name.lower()}/"
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        results = []
        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏
        profile_links = soup.find_all('a', href=re.compile(r'/[^/]+/$'))
        
        for link in profile_links[:20]:
            profile_url = 'https://www.instagram.com' + link.get('href')
            profile_name = link.get('href').strip('/')
            
            if is_exact_match(full_name, profile_name):
                results.append((profile_name, profile_url))
                if len(results) >= count:
                    break
        
        return results
    except Exception as e:
        return [("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Instagram", str(e))]

def parse_telegram_search(name, surname, count=10):
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–∏—Å–∫–∞ Telegram"""
    full_name = f"{name}{surname}"
    url = f"https://t.me/s/{full_name.lower()}"
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        results = []
        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã
        channel_links = soup.find_all('a', href=re.compile(r'/s/[^/]+'))
        
        for link in channel_links[:20]:
            profile_url = 'https://t.me' + link.get('href')
            profile_name = link.get('href').split('/')[-1]
            
            if is_exact_match(full_name, profile_name):
                results.append((profile_name, profile_url))
                if len(results) >= count:
                    break
        
        return results
    except Exception as e:
        return [("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram", str(e))]

def parse_search_results(email, engine="google", count=10):
    """–ü–∞—Ä—Å–∏—Ç –ø–æ–∏—Å–∫–æ–≤—É—é –≤—ã–¥–∞—á—É Google –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å –ø–æ email –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (title, url)."""
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    if engine == "google":
        url = f"https://www.google.com/search?q={urllib.parse.quote(email)}"
    else:
        url = f"https://yandex.ru/search/?text={urllib.parse.quote(email)}"
    try:
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        results = []
        if engine == "google":
            for g in soup.find_all('div', class_='tF2Cxc')[:count]:
                a = g.find('a')
                title = g.find('h3')
                if a and title:
                    results.append((title.get_text(strip=True), a['href']))
        else:
            for li in soup.find_all('li', class_='serp-item')[:count]:
                a = li.find('a', href=True)
                title = a.get_text(strip=True) if a else None
                href = a['href'] if a else None
                if title and href:
                    results.append((title, href))
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –¥–ª—è –Ø–Ω–¥–µ–∫—Å–∞:
            if not results:
                for a in soup.find_all('a', attrs={'accesskey': True}, href=True)[:count]:
                    title = a.get_text(strip=True)
                    href = a['href']
                    if title and href:
                        results.append((title, href))
        return results
    except Exception as e:
        return [(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {engine}", str(e))]

@bot.message_handler(commands=['find'])
def find_person(message):
    bot.send_chat_action(message.chat.id, 'typing')  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    query = message.text.replace('/find', '').strip()
    if not query or len(query.split()) < 2:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /find (–Ω–∞–ø—Ä–∏–º–µ—Ä: /find –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤)")
        return

    name, surname = query.split(' ', 1)
    full_name = f"{name} {surname}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    bot.send_chat_action(message.chat.id, 'typing')
    
    # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–æ—Ü—Å–µ—Ç–µ–π (—Ç–µ–ø–µ—Ä—å count=10)
    vk_results = parse_vk_search(name, surname, count=10)
    ok_results = parse_ok_search(name, surname, count=10)
    insta_results = parse_instagram_search(name, surname, count=10)
    tg_results = parse_telegram_search(name, surname, count=10)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è: {full_name}</b>\n\n"
    
    # VK —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if vk_results and not vk_results[0][0].startswith("–û—à–∏–±–∫–∞"):
        if len(vk_results) > 0:
            result += "üìò <b>–í–ö–æ–Ω—Ç–∞–∫—Ç–µ (—Ç–æ–ø-10):</b>\n"
            for profile_name, profile_url in vk_results:
                result += f"‚Ä¢ <a href='{profile_url}'>{profile_name}</a>\n"
            result += "\n"
        else:
            result += "üìò <b>–í–ö–æ–Ω—Ç–∞–∫—Ç–µ:</b> –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
    else:
        result += "üìò <b>–í–ö–æ–Ω—Ç–∞–∫—Ç–µ:</b> <a href='https://vk.com/search?c%5Bq%5D=" + urllib.parse.quote(full_name) + "&c%5Bsection%5D=people'>–ü–æ–∏—Å–∫</a>\n\n"
    
    # –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if ok_results and not ok_results[0][0].startswith("–û—à–∏–±–∫–∞"):
        if len(ok_results) > 0:
            result += "üë• <b>–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ (—Ç–æ–ø-10):</b>\n"
            for profile_name, profile_url in ok_results:
                result += f"‚Ä¢ <a href='{profile_url}'>{profile_name}</a>\n"
            result += "\n"
        else:
            result += "üë• <b>–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏:</b> –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
    else:
        result += "üë• <b>–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏:</b> <a href='https://ok.ru/search?st.query=" + urllib.parse.quote(full_name) + "&st.mode=Users'>–ü–æ–∏—Å–∫</a>\n\n"
    
    # Instagram —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if insta_results and not insta_results[0][0].startswith("–û—à–∏–±–∫–∞"):
        if len(insta_results) > 0:
            result += "üì∑ <b>Instagram (—Ç–æ–ø-10):</b>\n"
            for profile_name, profile_url in insta_results:
                result += f"‚Ä¢ <a href='{profile_url}'>{profile_name}</a>\n"
            result += "\n"
        else:
            result += "üì∑ <b>Instagram:</b> –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
    else:
        result += "üì∑ <b>Instagram:</b> <a href='https://www.instagram.com/explore/tags/" + full_name.replace(' ', '').lower() + "/'>–ü–æ–∏—Å–∫</a>\n\n"
    
    # Telegram —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if tg_results and not tg_results[0][0].startswith("–û—à–∏–±–∫–∞"):
        if len(tg_results) > 0:
            result += "üì± <b>Telegram (—Ç–æ–ø-10):</b>\n"
            for profile_name, profile_url in tg_results:
                result += f"‚Ä¢ <a href='{profile_url}'>{profile_name}</a>\n"
            result += "\n"
        else:
            result += "üì± <b>Telegram:</b> –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
    else:
        result += "üì± <b>Telegram:</b> <a href='https://t.me/s/" + full_name.replace(' ', '').lower() + "'>–ü–æ–∏—Å–∫</a>\n\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    result += "üîó <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–∏:</b>\n"
    result += f"‚Ä¢ <a href='https://www.google.com/search?q={urllib.parse.quote(full_name)}'>Google</a>\n"
    result += f"‚Ä¢ <a href='https://yandex.ru/search/?text={urllib.parse.quote(full_name)}'>–Ø–Ω–¥–µ–∫—Å</a>\n"
    result += f"‚Ä¢ <a href='https://www.facebook.com/search/people/?q={urllib.parse.quote(full_name)}'>Facebook</a>\n"
    result += f"‚Ä¢ <a href='https://www.youtube.com/results?search_query={urllib.parse.quote(full_name)}'>YouTube</a>\n"
    result += f"‚Ä¢ <a href='https://rutube.ru/search?text={urllib.parse.quote(full_name)}'>RUTUBE</a>\n"
    
    result += "\n<i>üí° –ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏. –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏.</i>"
    
    result += "\n<b>–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ —Å—É–¥–µ–±–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä—ã:</b>\n" + get_gov_links(full_name)
    result += "\n<b>–ù–æ–≤–æ—Å—Ç–∏ –∏ –°–ú–ò:</b>\n" + get_news_links(full_name)
    result += "\n<b>–ö–∞—Ä—Ç—ã –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n" + get_map_links(full_name)
    
    bot.send_message(message.chat.id, result, parse_mode='HTML', disable_web_page_preview=True)

@bot.message_handler(commands=['find_email'])
def find_by_email(message):
    email = message.text.replace('/find_email', '').strip()
    if not email:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ email –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /find_email")
        return
    google_results = parse_search_results(email, engine="google", count=10)
    yandex_results = parse_search_results(email, engine="yandex", count=10)
    result = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è email: {email}</b>\n\n"
    result += "<b>Google:</b>\n"
    if google_results and not google_results[0][0].startswith("–û—à–∏–±–∫–∞"):
        for title, url in google_results:
            result += f"‚Ä¢ <a href='{url}'>{title}</a>\n"
    else:
        result += "‚Ä¢ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Google\n"
    result += "\n<b>–Ø–Ω–¥–µ–∫—Å:</b>\n"
    if yandex_results and not yandex_results[0][0].startswith("–û—à–∏–±–∫–∞"):
        for title, url in yandex_results:
            result += f"‚Ä¢ <a href='{url}'>{title}</a>\n"
    else:
        result += "‚Ä¢ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ø–Ω–¥–µ–∫—Å\n"
    result += "\n<i>–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã.</i>"
    bot.send_message(message.chat.id, result, parse_mode='HTML', disable_web_page_preview=True)

@bot.message_handler(commands=['find_phone'])
def find_by_phone(message):
    phone = message.text.replace('/find_phone', '').strip()
    if not phone:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /find_phone")
        return
    google_url = f"https://www.google.com/search?q={urllib.parse.quote(phone)}"
    yandex_url = f"https://yandex.ru/search/?text={urllib.parse.quote(phone)}"
    result = (
        f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}</b>\n\n"
        f"‚Ä¢ <a href='{google_url}'>Google</a>\n"
        f"‚Ä¢ <a href='{yandex_url}'>–Ø–Ω–¥–µ–∫—Å</a>\n"
        "\n<i>–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã.</i>"
    )
    bot.send_message(message.chat.id, result, parse_mode='HTML', disable_web_page_preview=True)

@bot.message_handler(commands=['find_inn'])
def find_by_inn(message):
    inn = message.text.replace('/find_inn', '').strip()
    if not inn:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –ò–ù–ù –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /find_inn")
        return
    nalog_url = f"https://service.nalog.ru/inn.do"
    result = (
        f"üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ù–ù: {inn}</b>\n\n"
        f"‚Ä¢ <a href='{nalog_url}'>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ –§–ù–°</a>\n"
    )
    bot.send_message(message.chat.id, result, parse_mode='HTML', disable_web_page_preview=True)

@bot.message_handler(commands=['find_snils'])
def find_by_snils(message):
    snils = message.text.replace('/find_snils', '').strip()
    if not snils:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –°–ù–ò–õ–° –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /find_snils")
        return
    result = (
        f"üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –°–ù–ò–õ–°: {snils}</b>\n\n"
        f"‚Ä¢ <a href='https://www.gosuslugi.ru/'>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ì–æ—Å—É—Å–ª—É–≥–∞—Ö</a>\n"
    )
    bot.send_message(message.chat.id, result, parse_mode='HTML', disable_web_page_preview=True)

def get_gov_links(full_name):
    encoded = urllib.parse.quote(full_name)
    return (
        f"‚Ä¢ <a href='https://fssp.gov.ru/iss/ip'>–§–°–°–ü (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞)</a>\n"
        f"‚Ä¢ <a href='https://kad.arbitr.ru/'>–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Å—É–¥</a>\n"
        f"‚Ä¢ <a href='https://sudrf.ru/'>–°—É–¥–µ–±–Ω—ã–µ –¥–µ–ª–∞</a>\n"
        f"‚Ä¢ <a href='https://bankrot.fedresurs.ru/'>–†–µ–µ—Å—Ç—Ä –±–∞–Ω–∫—Ä–æ—Ç–æ–≤</a>\n"
        f"‚Ä¢ <a href='https://zakupki.gov.ru/'>–ì–æ—Å–∑–∞–∫—É–ø–∫–∏</a>\n"
    )

def get_news_links(full_name):
    encoded = urllib.parse.quote(full_name)
    return (
        f"‚Ä¢ <a href='https://news.google.com/search?q={encoded}'>Google News</a>\n"
        f"‚Ä¢ <a href='https://news.yandex.ru/yandsearch?text={encoded}'>–Ø–Ω–¥–µ–∫—Å.–ù–æ–≤–æ—Å—Ç–∏</a>\n"
    )

def get_map_links(full_name):
    encoded = urllib.parse.quote(full_name)
    return (
        f"‚Ä¢ <a href='https://2gis.ru/search/{encoded}'>2GIS</a>\n"
        f"‚Ä¢ <a href='https://yandex.ru/maps/?text={encoded}'>–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã</a>\n"
        f"‚Ä¢ <a href='https://www.google.com/maps/search/{encoded}'>Google Maps</a>\n"
        f"‚Ä¢ <a href='https://www.avito.ru/rossiya?q={encoded}'>Avito</a>\n"
    )

def get_gamer_profiles(username):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö –ø–æ –Ω–∏–∫–Ω–µ–π–º—É."""
    profiles = []
    # Twitch
    profiles.append(("Twitch", f"https://www.twitch.tv/{username}"))
    # Steam (–ø–æ–∏—Å–∫ –ø–æ –∫–∞—Å—Ç–æ–º–Ω–æ–º—É ID)
    profiles.append(("Steam (Custom ID)", f"https://steamcommunity.com/id/{username}"))
    # Steam (–ø–æ–∏—Å–∫ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É SteamID64)
    profiles.append(("Steam (SteamID64)", f"https://steamcommunity.com/profiles/{username}"))
    # Epic Games (–ø–æ–∏—Å–∫ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É —á–µ—Ä–µ–∑ —Å–∞–π—Ç Fortnite)
    profiles.append(("Epic Games (Fortnite)", f"https://fortnitetracker.com/profile/all/{username}"))
    # Battle.net (–ø–æ–∏—Å–∫ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É)
    profiles.append(("Battle.net", f"https://battle.net/{username}"))
    # Discord (–ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É, —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ Discord, —Ç.–∫. –ø—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ)
    profiles.append(("Discord", f"https://discord.com/users/{username}"))
    # Xbox Live
    profiles.append(("Xbox Live", f"https://account.xbox.com/en-us/Profile?gamertag={username}"))
    # Origin (EA)
    profiles.append(("Origin (EA)", f"https://www.ea.com/profile/{username}"))
    # Uplay (Ubisoft Connect)
    profiles.append(("Uplay (Ubisoft Connect)", f"https://ubisoftconnect.com/en-US/profile/{username}"))
    return profiles

@bot.message_handler(commands=['find_gamer'])
def find_gamer(message):
    query = message.text.replace('/find_gamer', '').strip()
    if not query or len(query.split()) < 2:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /find_gamer (–Ω–∞–ø—Ä–∏–º–µ—Ä: /find_gamer –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤)")
        return
    name, surname = query.split(' ', 1)
    nicknames = generate_nicknames(name, surname)
    result = f"\U0001F3AE <b>–í–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è: {name} {surname}</b>\n\n"
    for nickname in nicknames:
        result += f"<b>–ù–∏–∫–Ω–µ–π–º:</b> {nickname}\n"
        profiles = get_gamer_profiles(nickname)
        for service, url in profiles:
            result += f"‚Ä¢ <b>{service}:</b> <a href='{url}'>{url}</a>\n"
        result += "\n"
    result += "<i>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É.</i>"
    bot.send_message(message.chat.id, result, parse_mode='HTML', disable_web_page_preview=True)

if __name__ == '__main__':
    print("OSINT-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
            time.sleep(5)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å 5 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞